/*
        $Id: ipl.jt,v 1.7 2005/06/06 16:25:37 rbornat Exp $
        FONT{kontt-14}

This theory was derived automatically from the latex source text
of part of the paper ``Animating Operational Semantics
with Jape'' by Bernard Sufrin and Richard Bornat (April 1998). A
discursive account of the theory is given in that paper.

*/
    /************* Explained in the Lambda section of the paper *************/
    CLASS   VARIABLE a b c d e f g h i j k l m n o p q r s t u v w x y z
    CLASS   FORMULA  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
    SEQUENT IS LIST ⊢ FORMULA
    SUBSTFIX 500000 [ S / s ]

    INITIALISE outerassumptionword "Environment"
    INITIALISE innerassumptionword "Environment"

    MENU Edit
     RADIOBUTTON displaystyle
          "Sequent-Tree display style"  IS tree
     AND  "Box display style"           IS box
     INITIALLY box
     END
     CHECKBOX  autoselect      "Select goal automatically"  INITIALLY true
     CHECKBOX  showallprovisos "Show all provisos"          INITIALLY true
    END

    /************************************************************************/
    CLASS    CONSTANT k
    CONSTANT √ .
    INFIX    40R ;
    INFIX    50T :=
    INFIX    60R ? : ⊗
    INFIX    100T =
    INFIX    200T + -
    PREFIX   1000 ~
    USE      "mapping.j"
    INFIX   1T →
    LEFTFIX 2  ⟦ ⟧
     INFIX 1T →*
     RULE Step        FROM  ⊢ ⟦E⟧S→⟦E'⟧S' INFER ⊢ ⟦E⟧S→*⟦E'⟧S'
     RULE Transitive  FROM  ⊢ ⟦E⟧S→*⟦E'⟧S' AND ⊢ ⟦E'⟧S'→*⟦E''⟧S'' INFER ⊢⟦E⟧S→*⟦E''⟧S''
     RULE Identity    INFER ⊢ ⟦E⟧S→*⟦E⟧S
    TRANSITIVE RULE Transitive
    REFLEXIVE  RULE Identity
    MENU Edit
    SEPARATOR
      CHECKBOX   hidetransitivity "Transitive Rule Display" INITIALLY true
      CHECKBOX   hidereflexivity  "Hide Identity Steps"     INITIALLY true
    END
    MENU "Small-Step Rules"
      RULE  Var
      FROM  S x = V
      INFER ⟦x⟧ S → ⟦V⟧ S
      RULE ":=0"
      FROM    ⟦E⟧     S → ⟦E'⟧    S'
      INFER   ⟦x:=E⟧  S → ⟦x:=E'⟧ S'
      RULES ":=1"
      FROM  (S⊕(x==k)) = S'
      INFER ⟦x:=k⟧    S → ⟦√⟧ S'
      AND
      FROM  (S⊕(x==(~k))) = S'
      INFER ⟦x:=(~k)⟧ S → ⟦√⟧ S'
      END
      RULE ";0"
      FROM    ⟦E⟧   S → ⟦E'⟧   S'
      INFER   ⟦E;F⟧ S → ⟦E';F⟧ S'

      RULE ";1"
      INFER   ⟦√;F⟧ S → ⟦F⟧ S

      RULE "⊗"
      INFER ⟦E1⊗E2⟧ S → ⟦E1?(E2; E1⊗E2):√⟧ S

      RULE "?0"
      FROM  ⟦E1⟧       S → ⟦E1'⟧ S'
      INFER ⟦E1?E2:E3⟧ S → ⟦E1'?E2:E3⟧ S'

      RULES "?1"
      INFER ⟦0?E2:E3⟧  S → ⟦E3⟧ S
      AND
      INFER ⟦k?E2:E3⟧  S → ⟦E2⟧ S
      AND
      INFER ⟦~k?E2:E3⟧ S → ⟦E2⟧ S
      END
      RULES  "+"
      FROM  ⟦F⟧   S → ⟦F'⟧   S'
      INFER ⟦k+F⟧ S → ⟦k+F'⟧ S'
      AND
      FROM  ⟦F⟧    S → ⟦F'⟧    S'
      INFER ⟦~k+F⟧ S → ⟦~k+F'⟧ S'
      AND
      FROM  ⟦E⟧   S → ⟦E'⟧   S'
      INFER ⟦E+F⟧ S → ⟦E'+F⟧ S'
      END

      RULES  "-"
      FROM  ⟦F⟧   S → ⟦F'⟧   S'
      INFER ⟦k-F⟧ S → ⟦k-F'⟧ S'
      AND
      FROM  ⟦F⟧    S → ⟦F'⟧    S'
      INFER ⟦~k-F⟧ S → ⟦~k-F'⟧ S'
      AND
      FROM  ⟦E⟧   S → ⟦E'⟧   S'
      INFER ⟦E-F⟧ S → ⟦E'-F⟧ S'
      END
      RULE  add
      FROM  "ADD"(N1, N2, K, (~))
      INFER ⟦N1 + N2⟧ S → ⟦K⟧ S

      RULE  sub
      FROM  "ADD"(N1, ~N2, K, (~))
      INFER ⟦N1 - N2⟧ S → ⟦K⟧ S
   END
    TACTIC SmallStep IS
    (ALT (LAYOUT "Var"  () Var Lookup)
         (LAYOUT ":=1" () ":=1" Update)
         ":=0"
         ";1"
         ";0"
         "?1"
         "?0"
         "⊗"
         (ALT (LAYOUT "Add" () add EVALUATE) "+")
         (ALT (LAYOUT "Sub" () sub EVALUATE) "-")
         )
    TACTIC OneStep()
    (ALT
         (WHEN (LETGOAL (⟦_E ⟧_S →  ⟦_E'⟧_S') SmallStep)
               (LETGOAL (⟦ _k⟧_S →* _T) Identity)
               (LETGOAL (⟦~_k⟧_S →* _T) Identity)
               (LETGOAL (⟦√  ⟧_S →* _T) Identity)
               (LETGOAL (⟦_E ⟧_S →* ⟦_E'⟧_S') Transitive (LAYOUT "%h" () Step SmallStep))))
    TACTIC Steps()
    (ALT
         (WHEN (LETGOAL (⟦ _k⟧_S →* _T) Identity)
               (LETGOAL (⟦~_k⟧_S →* _T) Identity)
               (LETGOAL (⟦√  ⟧_S →* _T) Identity)
               (SEQ OneStep Steps)))
    CONJECTUREPANEL "Small Step Execution"
      BUTTON "Step" IS apply OneStep
      BUTTON "Steps" IS apply Steps
      THEOREMS SmallStepTheorems
      ARE ⟦x:=3⟧ ▪                              →* ⟦_E⟧ _S
      AND ⟦y:=3; x:=y⟧ ▪                        →* ⟦_E⟧ _S
      AND ⟦y:=x+3; x:=y⟧ (▪⊕(x==4))             →* ⟦_E⟧ _S
      AND ⟦y:=3; x:=y; z:=x+y⟧ ▪                →* ⟦_E⟧ _S
      AND ⟦t:=x; x:=y; y:=t⟧(▪⊕(x==k1)⊕(y==k2)) →* ⟦_E⟧ _S
      AND ⟦x:=2; y:=4; x⊗(x:=x-1; y:=y+y)⟧ ▪    →* ⟦_E⟧ _S
      END
    END
